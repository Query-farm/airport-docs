---
title: "Table Returning Functions"
---

The Airport extension for DuckDB supports having Arrow Flight servers provide table returning functions.  Table returning functions are SQL functions that return an arbitrary number of rows.

Table returning functions can have dynamic data types, i.e. their output types can change based on their input parameters.

## Examples

An example of a SQL query with a table returning function is:

```sql
SELECT * from custom_function('arg1');
```

In addition to taking scalar parameters table returning functions can be what are called "in-out" functions, where can they receive the output of another query then produce results.

An example of calling an "in-out" table returning function is:

```sql
SELECT * from in_out_function('arg1',
 (SELECT * from employees where name ilike 'R%')
);
```

The rows from the `employees` table will be sent incrementally to Arrow Flight server.

## Catalog Integration

For the Airport extension to define a table returning function from an Arrow Flight server, there must be information provided in the `app_metadata` of the `FlightInfo`.

This information is encoded using `msgpack` following the following structure.

```c++
struct SerializedFlightAppMetadata
{
  string type; // set to "table_function"

  // The name of the schema where this item exists.
  string schema;

  // The name of the catalog or database where this item exists.
  string catalog;

  // The name of the table returning function.
  string name;

  // A custom comment for this item.
  string comment;

  // This must be defined for a table returning function
  // it is a serialized Arrow schema.
  std::optional<string> input_schema;

  // The name of the action passed to the Arrow Flight server
  std::optional<string> action_name;

  // This is the function description for table or scalar functions.
  std::optional<string> description;

  MSGPACK_DEFINE_MAP(
      type, schema,
      catalog, name,
      comment, input_schema,
      action_name, description)
};
```

### Supporting the `ANY` DuckDB Data Type

If you wish to use the DuckDB ANY datatype, create a standard Arrow field in a schema, but add additional metadata with the name of `is_any_type` with a non empty table.  The Airport extension will treat that column as being defined as the `ANY` type.

### Schemas for Table Returning In-Out Functions

If the table returning function is desired to be an "in-out" function, there must be one and only one field in the Arrow input schema with a metadata key named `is_table_input`  with a non empty string value.  This column will be treated as the `TABLE` DuckDB data type by the Airport extension.

### Implementation

The Airport extension does two different things, depending if the table returning function is an "in-out" function or not.

#### Regular Table Returning Function

When the table returning function is called.  The Airport extension will make a `DoAction` Arrow Flight RPC call to the server with an action named `get_flight_info_table_function` to obtain a `FlightInfo` which will then be called with the `DoGet` Arrow Flight RPC method.  It is expected the server may interpret the parameters and return a new schema or otherwise encode the parameters in the returned `ticket` field of the `FlightInfo`.

The `get_flight_info_table_function` action receive this `msgpack` encoded map of parameters as its input:

```c++
struct GetFlightInfoTableFunctionParameters
{
  std::string schema_name;
  std::string action_name;
  std::string parameters;
  std::string table_input_schema;

  MSGPACK_DEFINE_MAP(schema_name, action_name, parameters, table_input_schema)
};
```

The `parameters` field contains a serialized Arrow Record Batch with the parameter values.  The field names of the record batch are the same as defined by the input schema of the function.

The `get_flight_info_table_function` is expected to return a single serialized Arrow `FlightInfo` structure, that will then be used to retrieve the data.  The custom action of ``get_flight_info_table_function` is used because it allows additional data to be serialized compared with the `GetFlightInfo` Arrow RPC method.


#### In-Out Table Function

In the case of an "in-out" table returning function a `DoExchange` Arrow RPC call is made.

The input schema for the `DoExchange` call is the schema of the "in" table.  The serialized parameters to the table returning function are sent an initial metadata message on the `DoExchange` stream.  The parameters are Arrow Record Batch with a single row.

The rows produced by the function are read from the `DoExchange` stream.

