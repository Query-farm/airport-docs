---
title: "Airport Extension Functions"
---

When the Airport extension is loaded into a DuckDB session it supplies a number of functions that can be called.

These functions are added to the `main` schema:

* [`airport_list_flights`](#airport_list_flights)
* [`airport_take_flight`](#airport_take_flight)

::: {.callout-tip}
Calling these functions are considered a lower level interface.  Airport also [integrates with the DuckDB catalog](catalog_integration.qmd) the allows Arrow Flights to operate much like DuckDB Tables.
:::

## Function Descriptions

### <a name="airport_list_flights">`airport_list_flights`</a>

This is a table returning function[^1] that produces a list of Arrow Flights that are available at the server specified.  Optionally criteria can be supplied that may be used by the server as it chooses.

__Example:__

```sql
SELECT * FROM airport_list_flights('grpc://127.0.0.1:8815', null);
```

__Function Signature:__

```sql
airport_list_flights(
  location,
  criteria,
  auth_token="token_value",
  secret="secret_name")
```

__Arguments:__

:::{.callout-note}

All arguments passed by name are optional.

:::

| Argument | Type | Description |
|--------|---|-------------------------------|
| location | `VARCHAR` | This is the location of the Flight server. Typically this will be of the form `grpc://$HOST:PORT` or `grpc+tls://$HOST:$PORT` |
| criteria | `VARCHAR` | This is free-form criteria to pass to the Flight server that may be used to filter the list of returned. |
| auth_token | `VARCHAR` | A bearer value token to present to the server, the header is formatted like `Authorization: Bearer <auth_token>` |
| secret | `VARCHAR` | This is the name of the [DuckDB secret](https://duckdb.org/docs/configuration/secrets_manager.html) to use to supply the value for the auth_token. |


---

### <a name="airport_list_flights">`airport_take_flight`</a>

This is a table returning function that returns the contents of an Arrow Flight.

__Example:__

```sql
SELECT * FROM airport_take_flight('grpc://localhost:8815/', ['example-stream']);
```

__Function Signature:__

```sql
airport_take_flight(
  location,
  descriptor,
  auth_token="token_value",
  secret="secret_name",
  ticket="ticket_value",
  headers={})
```

__Arguments:__

:::{.callout-note}

All arguments passed by name are optional.

:::

| Argument | Type | Description |
|--------|---|-------------------------------|
| location | `VARCHAR` | This is the location of the Flight server |
| descriptor | `ANY` | This is the descriptor of the flight.  If it is a `VARCHAR` or `BLOB` it is interpreted as a CMD flight descriptor, if it is an `ARRAY` or `VARCHAR[]` it is considered a path-based descriptor.  Any other type results in an error being raised.  |
| auth_token | `VARCHAR` | A bearer value token to present to the server, the header is formatted like `Authorization: Bearer <auth_token>` |
| secret | `VARCHAR` | This is the name of the [DuckDB secret](https://duckdb.org/docs/configuration/secrets_manager.html) to use to supply the value for the `auth_token` |
| ticket | `BLOB` | This is the ticket (an opaque binary token) supplied to the Flight server it overrides any ticket supplied from the server by a call to `GetFlightInfo` from DuckDB. |
| headers | `MAP(VARCHAR, VARCHAR)` | A map of extra gRPC headers to send with requests to the Flight server. |

In addition to the `criteria` parameter, the Airport extension will pass additional gRPC headers.

#### Serializing Filters

The `airport-duckdb-json-filters` header is sent with the gRPC requests.  The header contains a JSON serialized representation of all of the conditional filters that are going applied to the results.

To illustrate this through an example:

```sql
select * from airport_list_flights('grpc://localhost:8815/', null) where total_bytes = 5;
```

The gRPC header `airport-duckdb-json-filters` will be set to

```json
{
 "filters": [
  {
   "expression_class": "BOUND_COMPARISON",
   "type": "COMPARE_EQUAL",
   "left": {
    "expression_class": "BOUND_COLUMN_REF",
    "type": "BOUND_COLUMN_REF",
    "alias": "total_bytes",
    "return_type": {
     "id": "BIGINT"
    }
   },
   "right": {
    "expression_class": "BOUND_CONSTANT",
    "type": "VALUE_CONSTANT",
    "value": {
     "type": {
      "id": "BIGINT"
     },
     "is_null": false,
     "value": 5
    }
   }
  }
 ]
}
```

The `airport-duckdb-json-filters` header will not contain newlines, but the JSON has been reformatted in this document for ease of comprehension.

It is up to the implementer of the server to use this header to apply optimizations.  The Airport DuckDB extension will still apply the filters to the result returned by the server. This means that the filter logic is purely advisory.  In the author's experience, if Arrow Flight servers implement the filtering logic server side it can unlock some impressive optimizations.  The JSON schema of the serialized filter expressions is not guaranteed to remain unchanged across DuckDB versions, the serialization is performed by the DuckDB code.

#### Projection Optimization

The header `airport-duckdb-column-ids` will contain a comma-separated list of column indexes that are used in the query.  The Arrow Flight server can return nulls for columns that are not requested.  This can be used to reduce the amount of data that is transmitted in the response.

[^1]: Table returning functions like their name suggest return "tables" (with rows and columns), this is contrased by scalar functions that return a single scalar value.  Common examples in DuckDB of table returning functions are [`read_csv()`](https://duckdb.org/docs/data/csv/overview.html) or [`read_parquet()`](https://duckdb.org/docs/data/parquet/overview.html).