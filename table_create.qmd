---
title: "Create"
---

The Airport extension supports the creation of tables. The Arrow Flight server can decide if the table should actually be created.

## Example Usage

For a DuckDB session to create a table, a standard SQL `CREATE TABLE` statement is executed in a schema that is managed by the Airport extension.

```sql
-- Attach an Airport database
ATTACH 'example' (TYPE AIRPORT, location 'grpc://localhost:50312/');

-- assume that there is a `main` schema
-- already in the `example` database
CREATE TABLE example.main.employees (
  name varchar,
  id integer
);
```

## Server Side Implementation

The Airport extension will perform a `DoAction` Arrow Flight RPC call with a method name of `create_table`.

The single parameter provided to the `create_table` action will be a `msgpack` serialized structure.

```c++
struct AirportCreateTableParameters
{
  string catalog_name;
  string schema_name;
  string table_name;

  // The serialized Arrow schema for the table.
  string arrow_schema;

  // This will be "error", "ignore", or "replace"
  string on_conflict;

  // The list of constraint expressions.
  vector<uint64_t> not_null_constraints;
  vector<uint64_t> unique_constraints;
  vector<string> check_constraints;

  MSGPACK_DEFINE_MAP(
    catalog_name, schema_name,
    table_name, arrow_schema,
    on_conflict, not_null_constraints,
    unique_constraints, check_constraints)
};
```

The `create_table` action is expected to return a single [`FlightInfo`](https://github.com/apache/arrow/blob/ac1f05f28e18e85ee55cf7aaf3c8ae1ffe0e92d7/format/Flight.proto#L275) result that represents an Apache Flight that can be utilized to obtain the contents of the table.

