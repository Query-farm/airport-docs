---
title: "Airport Extension for DuckDB"
---

The **Airport** extension brings [Arrow Flight](https://arrow.apache.org/docs/format/Flight.html) support to [DuckDB](https://duckdb.org), enabling DuckDB to query, modify, and store data via Arrow Flight servers.

To understand the rationale behind its development, check out the [motivation for creating the extension](motivation.qmd).

## What is a DuckDB Extension?

A DuckDB extension is a plugin that expands DuckDB's core functionality by adding new capabilities.

## Getting started

The Airport extension is a [DuckDB community extension](https://duckdb.org/community_extensions/).
To install it, run the following SQL inside DuckDB:

```sql
INSTALL airport FROM community;
```

To load the extension you can then execute:

```sql
LOAD airport;
```

If you wish to build the extension from source see these [instructions](build_instructions.qmd).

## What can I do with the Airport extension that I can't do with DuckDB now?

With Airport, you can:

* Provide a [Data-as-a-Service](data_as_a_service.qmd) infrastructure.
* Query data that DuckDB can't normally access—either because it’s non-tabular or in an unsupported format.
* Add custom SQL functions not available in DuckDB.
* Serve data with fine-grained access control, filtering both rows and columns based on user permissions.
* Easily work with data formats that DuckDB doesn’t natively support.
* Query data from APIs and return the results as tables.

## What is Arrow Flight?

<img src="https://arrow.apache.org/docs/_static/arrow.png" style="float:right" width="200px" alt="Apache Arrow Logo"/>

From the Apache Arrow Documentation:

> [Arrow Flight](https://arrow.apache.org/docs/format/Flight.html) is an RPC framework for high-performance data services based on [Apache Arrow](https://arrow.apache.org/docs/index.html) and is built on top of [gRPC](https://grpc.io) and the [Arrow IPC format](https://arrow.apache.org/docs/format/Columnar.html#format-ipc).
>
> Flight is organized around streams of Arrow record batches[^recordbatches], being either downloaded from or uploaded to another service. A set of metadata methods offers discovery and introspection of streams, as well as the ability to implement application-specific methods.
>
> Methods and message wire formats are defined by [Protobuf](https://protobuf.dev), enabling interoperability with clients that may support gRPC and Arrow separately, but not Flight. However, Flight implementations include further optimizations to avoid overhead in usage of Protobuf (mostly around avoiding excessive memory copies).

[^recordbatches]: A record batch is a collection of equal-length arrays that all match a schema.

## What is an Apache Arrow "Flight"?

An Apache Arrow flight (hereafter referred to simply as a "flight") is a source or destination for data that is accessible via the Apache Arrow Flight RPC framework.  Each flight has a schema and one or more endpoints, that may offer one or more locations.

You can think of flights to be simliar to be a collection of files that share the same schema or even more apt a database table that is stored on a remote server.  Apache Arrow Flight servers often provide many different flights.

## How does Airport work with DuckDB?

Airport is an extension written in C++ for DuckDB version 1.2.0 or later. Airport extends DuckDB with these capabilities:

1. The ability to list flights provided by a server.
2. The ability to consume data from flights via `SELECT`.
3. Integration with the DuckDB catalog so that flights can optionally be registered as tables.  This allows `INSERT`, `UPDATE` or `DELETE` operations for flights.
4. Adds the ability for Arrow Flight servers to provide both scalar and table returning functions.

## Conference Presentations

Rusty Conover presented the Airport extension in a presentation titled *"Airport For DuckDB: Letting DuckDB take flight."* at DuckCon #6.

{{< video https://www.youtube.com/watch?v=-AfgEiE2kaI>}}

