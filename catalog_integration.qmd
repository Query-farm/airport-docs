---
title: "Catalog Integration with DuckDB"
---

DuckDB maintains a catalog in each database, which serves as the root of a hierarchy. This hierarchy consists of databases and schemas.

The Airport extension allows databases to be attached to the current DuckDB catalog, similar to how [PostgreSQL](https://duckdb.org/docs/extensions/postgres.html#connecting) and [SQLite](https://duckdb.org/docs/extensions/sqlite.html#usage) databases can be attached to a DuckDB session.

::: {.callout-note}
As of DuckDB version 1.2.0, attached databases are not persisted in an on-disk DuckDB database. This means they need to be reattached for each session.
:::

An Airport server-provided database can be attached using an [`ATTACH`](https://duckdb.org/docs/sql/statements/attach.html) statement:

__Example:__

```sql
ATTACH 'database_name' (
  TYPE AIRPORT,
  LOCATION 'grpc://localhost:12345/'
);
```

Schema information is only retrieved from the server when a schema provided by an Airport database is referenced for the first time.

## Reviewing Catalogs and Schemas

DuckDB maintains a catalog in every database session. The catalog follows a hierarchy:

**Catalogs &gt; Schemas &gt; Tables and Functions**

The following example demonstrates how running DuckDB with a database called `example.db` results in a database named `example` being attached:

```sql
$ duckdb example.db
D SELECT database_name FROM duckdb_databases();
┌───────────────┐
│ database_name │
│    varchar    │
├───────────────┤
│ example       │
│ system        │
│ temp          │
└───────────────┘
```

If all schemas are listed using `duckdb_schemas()`, the `example` database includes a default schema called `main`:

```sql
$ duckdb example.db
D SELECT database_name, schema_name FROM duckdb_schemas();
┌───────────────┬────────────────────┐
│ database_name │    schema_name     │
│    varchar    │      varchar       │
├───────────────┼────────────────────┤
│ example       │ main               │
│ system        │ information_schema │
│ system        │ main               │
│ system        │ pg_catalog         │
│ temp          │ main               │
└───────────────┴────────────────────┘
```

## Attaching an Airport Database

To attach an database provided by Airport execute a SQL `ATTACH` statement with the necessary information that provides the name of the database to attach and the URL of the Arrow Flight server.

```sql
ATTACH 'airport_database_name' (
  TYPE AIRPORT,
  LOCATION 'grpc://localhost:12345/'
);
```

::: {.callout-tip}
Arrow Flight servers can provide multiple databases at the same location or URL.  It is important to match the target database name expected by the server.  The database can be renamed in DuckDB [by using an alias](https://duckdb.org/docs/sql/statements/attach.html).
:::

__Attach Arguments:__

| Argument | Type | Description |
|--------|---|-------------------------------|
| type | VARCHAR | This must always be the value `AIRPORT`. |
| location | VARCHAR | This is the location of the Flight server. Typically this will be of the form `grpc://$HOST:PORT` or `grpc+tls://$HOST:$PORT` |
| secret | VARCHAR | This is the name of the [DuckDB secret](https://duckdb.org/docs/configuration/secrets_manager.html) to use to supply the value for the `auth_token`. |
| auth_token | VARCHAR | A bearer value token to present to the server, the header is formatted like `Authorization: Bearer <auth_token>` |

Once a database has been attached the tables will be visable in either `SHOW ALL TABLES` or `SELECT * from duckdb_tables()`.

To make the tables accessible without using full qualification in the queries you may want to update the search path to include the newly attached database as show in the following example:

```sql
SET search_path = 'example,airport_database_name';
SELECT * FROM tbl1;
SELECT * FROM tbl2;
```

This example would find `tbl1` or `tbl2` if they are defined in either the `example` database or the `airport_database_name` database.

## Implementing Catalog Integration for Arrow Flight Servers

For an Arrow Flight server to provide catalog integration, it must implement a custom Arrow Flight action called `list_schemas` that returns the schema information to callers. See the [server implementation details](server_catalog_integration.qmd).
