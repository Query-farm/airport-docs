---
title: "Frequently Asked Questions"
---

## Architecture and Design

#### 1. Could Airport be implemented without Arrow Flight?

  Yes, but using REST would restrict features that rely on bi-directional streaming. Airport uses gRPC, which currently limits compatibility with WebAssembly and browser-based environments.

#### 2. Why is `msgpack` used instead of JSON?

  `msgpack` supports efficient binary serialization, including raw binary data, while JSON is limited to UTF-8 encoded text and does not support arbitrary binary content.

#### 3. Why does the extension take a long time to build?

  The build process is lengthy due to the size and complexity of the extensionâ€™s dependencies, particularly `arrow`, `curl`, and `msgpack`.

## Compatibility and Platform Support

#### 4. Does the Airport extension work with WebAssembly/WASM?

  No. Airport depends on gRPC and Protocol Buffers, which are not currently supported in standard WASM environments.

  If the support for gRPC in WebAssembly changes, this status could change.

#### 5. What version of DuckDB is supported?

  Airport targets DuckDB version 1.3.0, available on the [`main`](https://github.com/Query-farm/duckdb-airport-extension/tree/main) branch of the extension repository.

#### 6. Is Airport compatible with Windows, macOS, and Linux?

  Yes. Airport builds and runs on all platforms supported by DuckDB, including Windows, macOS, and Linux. Most development is tested on macOS.

## Installation and Dependencies

#### 7. How do I install the Airport extension in DuckDB?

  You can install the extension using the DuckDB CLI:

  ```sql
  INSTALL airport FROM community;
  LOAD airport;
  ```

  See the [installation instructions](https://github.com/Query-farm/duckdb-airport-extension#installation) for more details.

#### 8. What dependencies does the Airport extension have?

Airport depends on the following [`vcpkg`](https://vcpkg.io/en/) packages:

- [`msgpack`](https://vcpkg.io/en/package/msgpack.html)
- [`arrow`](https://vcpkg.io/en/package/arrow.html)
- [`curl`](https://vcpkg.io/en/package/curl.html)

The specific versions are determined by the commit of `vcpkg` used in the DuckDB extension build process, as specified in the [`extension-ci-tools`](https://github.com/duckdb/extension-ci-tools) repository.

---

## Licensing

#### 9. What is the software license for the Airport extension?

The Airport extension is licensed under the [MIT license](https://opensource.org/licenses/MIT), the same as DuckDB.

Arrow Flight servers used with Airport may use different software licenses independently.

---

## Security

#### 10. Does Airport support authentication or TLS?

Authentication and TLS are currently handled by the Arrow Flight server configuration.

---

## Usage and Features

#### 11. What can I do with Airport?

Airport enables DuckDB to query remote Arrow Flight servers as if they were local SQL tables. This supports external data access, streaming integration, and federated queries.

#### 12. Can I use Airport with custom Arrow Flight servers?

Yes. Airport can connect to any Arrow Flight server that implements the standard protocol and provides schemas compatible with DuckDB.

---

## Troubleshooting and Support

#### 13. What should I do if the extension fails to build or load?

Ensure you are using a supported DuckDB version (1.3.0 or greater). If building from source, verify that all `vcpkg` dependencies are correctly resolved.

For further help, open an issue on the [GitHub repository](https://github.com/Query-farm/duckdb-airport-extension/issues).

#### 14. How can I debug connectivity or performance issues?

Enable verbose logging in DuckDB, and inspect any error messages during extension loading or queries. You may also use gRPC tracing tools or network diagnostics to analyze connectivity with Arrow Flight servers.
